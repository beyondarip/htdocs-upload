import cv2
import numpy as np
import time
import tkinter as tk
from tkinter import ttk, Menu
from threading import Thread
from PIL import Image, ImageTk
from ultralytics import YOLO
import os
import sys

# Mute Ultraytics YOLO logging
sys.stdout = open(os.devnull, 'w')
sys.stderr = open(os.devnull, 'w')

class YOLODetection(Thread):
    def __init__(self, model_path="yolov8n.pt"):
        super().__init__()
        self.model = YOLO(model_path)
        self.cap = cv2.VideoCapture(0)
        self.running = False
        self.frame = None

    def run(self):
        self.running = True
        while self.running:
            ret, frame = self.cap.read()
            if ret:
                # Deteksi objek
                results = self.model(frame)
                for result in results:
                    for box in result.boxes:
                        x1, y1, x2, y2 = map(int, box.xyxy[0])  # Koordinat bounding box
                        conf = box.conf[0]  # Confidence score
                        cls = int(box.cls[0])  # Kelas objek
                        label = f"{self.model.names[cls]} {conf:.2f}"
                        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                        cv2.putText(frame, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

                self.frame = frame

    def stop(self):
        self.running = False
        self.cap.release()

    def get_frame(self):
        return self.frame


class Application(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("YOLOv8 Object Detection")
        self.geometry("800x600")

        # Menu
        self.menu_bar = Menu(self)
        self.config(menu=self.menu_bar)

        # Menambahkan menu File
        self.file_menu = Menu(self.menu_bar, tearoff=0)
        self.menu_bar.add_cascade(label="File", menu=self.file_menu)
        self.file_menu.add_command(label="Exit", command=self.quit)

        # Menambahkan menu Edit
        self.edit_menu = Menu(self.menu_bar, tearoff=0)
        self.menu_bar.add_cascade(label="Edit", menu=self.edit_menu)
        self.edit_menu.add_command(label="Preferences")

        # Toolbar
        self.toolbar_frame = tk.Frame(self)
        self.toolbar_frame.pack(side=tk.TOP, fill=tk.X)

        # Tombol-tombol di toolbar
        self.start_button = tk.Button(self.toolbar_frame, text="Start Detection", command=self.start_detection)
        self.start_button.pack(side=tk.LEFT, padx=10)

        self.stop_button = tk.Button(self.toolbar_frame, text="Stop Detection", command=self.stop_detection, state=tk.DISABLED)
        self.stop_button.pack(side=tk.LEFT, padx=10)

        self.draw_button = tk.Button(self.toolbar_frame, text="Start Draw Box", command=self.toggle_draw_box)
        self.draw_button.pack(side=tk.LEFT, padx=10)

        self.close_button = tk.Button(self.toolbar_frame, text="Close", command=self.close_application)
        self.close_button.pack(side=tk.RIGHT, padx=10)

        # Taskbar (Status Bar)
        self.status_bar = tk.Label(self, text="Status: Ready", anchor="w")
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)

        # Tampilan video
        self.video_label = tk.Label(self)
        self.video_label.pack()

        # FPS
        self.start_time = time.time()
        self.frame_count = 0
        self.fps = 0

        # Thread deteksi
        self.yolo_thread = None  # Deteksi tidak dimulai sampai tombol start ditekan

        # Update tampilan video
        self.update_video_frame()

        # Status menggambar kotak
        self.drawing_box = False
        self.box_start = None
        self.box_end = None
        self.boxes = []  # Menyimpan kotak yang digambar
        self.current_box = None  # Kotak yang sedang digambar
        self.is_box_drawn = False  # Status apakah kotak sudah digambar

        # Mengikat event mouse
        self.bind_mouse_events()

        # Timer untuk menyimpan gambar crop
        self.last_crop_time = time.time()

    def start_detection(self):
        if self.yolo_thread is None or not self.yolo_thread.is_alive():
            self.yolo_thread = YOLODetection(model_path="yolov8n.pt")
            self.yolo_thread.start()

        self.start_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.NORMAL)
        self.status_bar.config(text="Status: Detection Started")

        # Reset FPS kalkulasi saat mulai deteksi
        self.frame_count = 0
        self.start_time = time.time()

    def stop_detection(self):
        self.start_button.config(state=tk.NORMAL)
        self.stop_button.config(state=tk.DISABLED)
        self.status_bar.config(text="Status: Detection Stopped")
        self.yolo_thread.stop()

    def toggle_draw_box(self):
        self.drawing_box = not self.drawing_box
        if self.drawing_box:
            self.draw_button.config(text="Stop Draw Box")
            self.status_bar.config(text="Status: Drawing Box")
        else:
            self.draw_button.config(text="Start Draw Box")
            self.status_bar.config(text="Status: Box Drawing Stopped")

    def update_video_frame(self):
        if self.yolo_thread and self.yolo_thread.frame is not None:
            frame = self.yolo_thread.frame

            # Menghitung FPS hanya jika deteksi aktif
            if self.yolo_thread.running:
                self.frame_count += 1
                elapsed_time = time.time() - self.start_time
                if elapsed_time > 1:
                    self.fps = self.frame_count / elapsed_time
                    self.start_time = time.time()
                    self.frame_count = 0

            # Menampilkan FPS di frame
            cv2.putText(frame, f"FPS: {self.fps:.2f}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

            # Menampilkan kotak yang sudah digambar
            for (start, end) in self.boxes:
                cv2.rectangle(frame, start, end, (128, 0, 0), 2)  # Warna maroon (128, 0, 0)

            # Menggambar kotak yang sedang digambar
            if self.drawing_box and self.box_start and self.box_end:
                cv2.rectangle(frame, self.box_start, self.box_end, (128, 0, 0), 2)  # Warna maroon

            # Menampilkan frame yang diubah ke Tkinter
            frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            image = Image.fromarray(frame_rgb)
            image_tk = ImageTk.PhotoImage(image)

            # Update gambar video
            self.video_label.config(image=image_tk)
            self.video_label.image = image_tk

            # Crop gambar jika sudah ada kotak yang digambar dan simpan setiap 5 detik
            if self.boxes:
                current_time = time.time()
                if current_time - self.last_crop_time >= 5:
                    for (start, end) in self.boxes:
                        # Crop gambar di dalam kotak maroon
                        cropped_image = frame[start[1]:end[1], start[0]:end[0]]
                        
                        # Menambahkan kotak deteksi YOLO pada gambar crop
                        results = self.yolo_thread.model(frame)
                        for result in results:
                            for box in result.boxes:
                                x1, y1, x2, y2 = map(int, box.xyxy[0])  # Koordinat bounding box
                                conf = box.conf[0]  # Confidence score
                                cls = int(box.cls[0])  # Kelas objek
                                label = f"{self.yolo_thread.model.names[cls]} {conf:.2f}"
                                cv2.rectangle(cropped_image, (x1 - start[0], y1 - start[1]), (x2 - start[0], y2 - start[1]), (0, 255, 0), 2)
                                cv2.putText(cropped_image, label, (x1 - start[0], y1 - start[1] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
                        
                        # Menyimpan gambar crop
                        cropped_filename = f"cropped_{int(current_time)}.png"
                        cv2.imwrite(cropped_filename, cropped_image)
                    self.last_crop_time = current_time

        # Mengupdate frame video setiap 20 ms
        self.after(20, self.update_video_frame)

    def mouse_press_event(self, event):
        if self.drawing_box and not self.is_box_drawn:
            self.box_start = (event.x, event.y)
            self.box_end = self.box_start

    def mouse_move_event(self, event):
        if self.drawing_box and self.box_start:
            self.box_end = (event.x, event.y)

    def mouse_release_event(self, event):
        if self.drawing_box and self.box_start:
            self.box_end = (event.x, event.y)
            self.boxes.append((self.box_start, self.box_end))  # Menyimpan kotak yang sudah digambar
            self.is_box_drawn = True  # Menandakan bahwa kotak sudah digambar
            self.box_start = None
            self.box_end = None

    def mouse_drag_event(self, event):
        if self.drawing_box and self.box_start:
            # Geser posisi kotak jika masih dalam mode menggambar
            dx = event.x - self.box_start[0]
            dy = event.y - self.box_start[1]
            self.box_start = (self.box_start[0] + dx, self.box_start[1] + dy)
            self.box_end = (self.box_end[0] + dx, self.box_end[1] + dy)

    def bind_mouse_events(self):
        self.bind("<ButtonPress-1>", self.mouse_press_event)
        self.bind("<B1-Motion>", self.mouse_move_event)
        self.bind("<ButtonRelease-1>", self.mouse_release_event)

    def unbind_mouse_events(self):
        self.unbind("<ButtonPress-1>")
        self.unbind("<B1-Motion>")
        self.unbind("<ButtonRelease-1>")

    def close_application(self):
        if self.yolo_thread and self.yolo_thread.is_alive():
            self.yolo_thread.stop()  # Menghentikan thread deteksi jika aktif
        self.quit()  # Menutup aplikasi

if __name__ == "__main__":
    app = Application()
    app.mainloop()
